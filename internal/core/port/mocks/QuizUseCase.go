// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/alexilallas/quiz/internal/core/entity"
	mock "github.com/stretchr/testify/mock"
)

// QuizUseCase is an autogenerated mock type for the QuizUseCase type
type QuizUseCase struct {
	mock.Mock
}

// ListQuestions provides a mock function with given fields:
func (_m *QuizUseCase) ListQuestions() entity.Questions {
	ret := _m.Called()

	var r0 entity.Questions
	if rf, ok := ret.Get(0).(func() entity.Questions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.Questions)
		}
	}

	return r0
}

// RegisterAnswers provides a mock function with given fields: _a0
func (_m *QuizUseCase) RegisterAnswers(_a0 entity.Answer) entity.Response {
	ret := _m.Called(_a0)

	var r0 entity.Response
	if rf, ok := ret.Get(0).(func(entity.Answer) entity.Response); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Response)
	}

	return r0
}

type mockConstructorTestingTNewQuizUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuizUseCase creates a new instance of QuizUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuizUseCase(t mockConstructorTestingTNewQuizUseCase) *QuizUseCase {
	mock := &QuizUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
