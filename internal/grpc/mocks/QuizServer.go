// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "github.com/alexilallas/quiz/internal/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// QuizServer is an autogenerated mock type for the QuizServer type
type QuizServer struct {
	mock.Mock
}

// ListQuestions provides a mock function with given fields: _a0, _a1
func (_m *QuizServer) ListQuestions(_a0 context.Context, _a1 *emptypb.Empty) (*grpc.Questions, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *grpc.Questions
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *grpc.Questions); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Questions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAnswers provides a mock function with given fields: _a0, _a1
func (_m *QuizServer) RegisterAnswers(_a0 context.Context, _a1 *grpc.Answer) (*grpc.QuizResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *grpc.QuizResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.Answer) *grpc.QuizResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.QuizResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpc.Answer) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedQuizServer provides a mock function with given fields:
func (_m *QuizServer) mustEmbedUnimplementedQuizServer() {
	_m.Called()
}

type mockConstructorTestingTNewQuizServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuizServer creates a new instance of QuizServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuizServer(t mockConstructorTestingTNewQuizServer) *QuizServer {
	mock := &QuizServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
