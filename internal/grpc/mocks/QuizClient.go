// Code generated by mockery v2.17.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	internalgrpc "github.com/alexilallas/quiz/internal/grpc"

	mock "github.com/stretchr/testify/mock"
)

// QuizClient is an autogenerated mock type for the QuizClient type
type QuizClient struct {
	mock.Mock
}

// ListQuestions provides a mock function with given fields: ctx, in, opts
func (_m *QuizClient) ListQuestions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*internalgrpc.Questions, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalgrpc.Questions
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *internalgrpc.Questions); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalgrpc.Questions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAnswers provides a mock function with given fields: ctx, in, opts
func (_m *QuizClient) RegisterAnswers(ctx context.Context, in *internalgrpc.Answer, opts ...grpc.CallOption) (*internalgrpc.QuizResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *internalgrpc.QuizResponse
	if rf, ok := ret.Get(0).(func(context.Context, *internalgrpc.Answer, ...grpc.CallOption) *internalgrpc.QuizResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internalgrpc.QuizResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *internalgrpc.Answer, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQuizClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuizClient creates a new instance of QuizClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuizClient(t mockConstructorTestingTNewQuizClient) *QuizClient {
	mock := &QuizClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
