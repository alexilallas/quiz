// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: quiz.proto

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Quiz_ListQuestions_FullMethodName   = "/Quiz/ListQuestions"
	Quiz_RegisterAnswers_FullMethodName = "/Quiz/RegisterAnswers"
)

// QuizClient is the client API for Quiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizClient interface {
	ListQuestions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Questions, error)
	RegisterAnswers(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*QuizResponse, error)
}

type quizClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizClient(cc grpc.ClientConnInterface) QuizClient {
	return &quizClient{cc}
}

func (c *quizClient) ListQuestions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Questions, error) {
	out := new(Questions)
	err := c.cc.Invoke(ctx, Quiz_ListQuestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) RegisterAnswers(ctx context.Context, in *Answer, opts ...grpc.CallOption) (*QuizResponse, error) {
	out := new(QuizResponse)
	err := c.cc.Invoke(ctx, Quiz_RegisterAnswers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServer is the server API for Quiz service.
// All implementations must embed UnimplementedQuizServer
// for forward compatibility
type QuizServer interface {
	ListQuestions(context.Context, *empty.Empty) (*Questions, error)
	RegisterAnswers(context.Context, *Answer) (*QuizResponse, error)
	mustEmbedUnimplementedQuizServer()
}

// UnimplementedQuizServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServer struct {
}

func (UnimplementedQuizServer) ListQuestions(context.Context, *empty.Empty) (*Questions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestions not implemented")
}
func (UnimplementedQuizServer) RegisterAnswers(context.Context, *Answer) (*QuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAnswers not implemented")
}
func (UnimplementedQuizServer) mustEmbedUnimplementedQuizServer() {}

// UnsafeQuizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServer will
// result in compilation errors.
type UnsafeQuizServer interface {
	mustEmbedUnimplementedQuizServer()
}

func RegisterQuizServer(s grpc.ServiceRegistrar, srv QuizServer) {
	s.RegisterService(&Quiz_ServiceDesc, srv)
}

func _Quiz_ListQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).ListQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_ListQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).ListQuestions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_RegisterAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Answer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).RegisterAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quiz_RegisterAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).RegisterAnswers(ctx, req.(*Answer))
	}
	return interceptor(ctx, in, info, handler)
}

// Quiz_ServiceDesc is the grpc.ServiceDesc for Quiz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quiz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Quiz",
	HandlerType: (*QuizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListQuestions",
			Handler:    _Quiz_ListQuestions_Handler,
		},
		{
			MethodName: "RegisterAnswers",
			Handler:    _Quiz_RegisterAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz.proto",
}
